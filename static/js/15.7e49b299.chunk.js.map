{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","views/divisions/Divisions.js"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","cookies","Cookies","token","get","Divisions","props","getData","a","setState","loaded","getDivisions","fetch","method","headers","response","json","data","divisions","fault","state","sm","xl","map","division","hrefLink","_id","href","name","Component"],"mappings":"gKAAAA,EAAOC,QAAU,EAAQ,M,iCCAzB,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,OA/BZ,mC,4ICkBMC,EAAU,IAAIC,IACdC,EAAQF,EAAQG,IAAI,cAGpBC,GAFOJ,EAAQG,IAAI,gB,kDAGvB,WAAYE,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,QAnBmB,sBAmBT,sBAAAC,EAAA,sEACF,EAAKC,SAAS,CAACC,QAAQ,IADrB,uBAEF,EAAKC,eAFH,uBAGF,EAAKF,SAAS,CAACC,QAAQ,IAHrB,2CAnBS,EAyBnBC,aAzBmB,sBAyBJ,8BAAAH,EAAA,+EAEYI,MAAM,yEAA0E,CACrGC,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,aAAcX,KANP,cAELY,EAFK,gBASQA,EAASC,OATjB,OASLC,EATK,OAUX,EAAKR,SAAS,CAACS,UAAWD,IAVf,kDAYX,EAAKR,SAAS,CAACU,OAAO,IAZX,0DAvBb,EAAKC,MAAQ,CACXF,UAAW,GACXR,QAAQ,EACRS,OAAO,GALQ,E,4FASnB,sBAAAX,EAAA,sEACQb,KAAKY,UADb,gD,0EAuDA,WACE,MAA4BZ,KAAKyB,MAA1BF,EAAP,EAAOA,UAAWR,EAAlB,EAAkBA,OAClB,OACE,mCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMW,GAAG,KAAKC,GAAG,KAAjB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,uBACE,cAAC,IAAD,OAqBF,cAAC,IAAD,UACGZ,EAEG,cAAC,IAAD,UACGQ,EAAUK,KAAI,SAACC,GACd,IAAMC,EAAQ,sBAAkBD,EAASE,KACzC,OACE,eAAC,IAAD,CAAgBC,KAAMF,EAAtB,UACE,qCAAQD,EAASE,OACjB,uCAAUF,EAASI,gBAM7B,uD,GA7GMC,cAwHTxB","file":"static/js/15.7e49b299.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, {Component, useState} from 'react';\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol, CForm, CFormGroup, CInput, CListGroup, CListGroupItem,\n  CNav,\n  CNavItem,\n  CNavLink,\n  CRow,\n  CTabContent,\n  CTabPane,\n  CTabs\n} from \"@coreui/react\";\nimport Cookies from \"universal-cookie\";\n\nconst cookies = new Cookies();\nconst token = cookies.get('auth-token');\nconst user = cookies.get('current-user');\n\nclass Divisions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      divisions: [],\n      loaded: false,\n      fault: false\n    }\n  }\n\n  async componentDidMount() {\n    await this.getData();\n  }\n\n  // async componentDidUpdate(prevProps, prevState, snapshot) {\n  //   if (this.state.divisions !== prevState.divisions) {\n  //     await this.getData();\n  //   }\n  // }\n\n  getData = async () => {\n    await this.setState({loaded: false});\n    await this.getDivisions();\n    await this.setState({loaded: true});\n  }\n\n  getDivisions = async () => {\n    try {\n      const response = await fetch('https://stepbot-cooltech-internal-api.herokuapp.com/divisions/find/all', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': token\n        }\n      })\n      const data = await response.json();\n      this.setState({divisions: data});\n    } catch (err) {\n      this.setState({fault: true});\n    }\n  }\n\n  // const createDivision = async () => {\n  //   if (newName !== '' && newLogin !== '' && newPassword !== '') {\n  //     const id = divisionID;\n  //     const response = await fetch(`https://stepbot-cooltech-internal-api.herokuapp.com/divisions/add/credentials/${id}`, {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         'auth-token': token\n  //       },\n  //       body: JSON.stringify({\n  //         name: newName,\n  //         login: newLogin,\n  //         password: newPassword\n  //       })\n  //     })\n  //     const feedback = await response.json();\n  //     handleResponse(feedback);\n  //   } else {\n  //     const feedback = {message: 'You need to fill in all fields before adding.'}\n  //     handleResponse(feedback);\n  //   }\n  // }\n\n  render() {\n    const {divisions, loaded} = this.state;\n    return (\n      <>\n        <CRow>\n          <CCol sm=\"12\" xl=\"12\">\n            <CCard>\n              <CCardHeader>Divisions\n                <CCardHeader>\n                  {/*<CForm action=\"\" method=\"POST\">*/}\n                  {/*  <CFormGroup row>*/}\n                  {/*    <CCol sm=\"6\">*/}\n                  {/*      <CInput size=\"sm\" type=\"text\" id=\"new-name\" name=\"new-name\" className=\"input-sm input-field\"*/}\n                  {/*              placeholder=\"New name\"*/}\n                  {/*              onChange={onFieldChange}/>*/}\n                  {/*      <CInput size=\"sm\" type=\"text\" id=\"new-login\" name=\"new-login\" className=\"input-sm input-field\"*/}\n                  {/*              placeholder=\"new login\"*/}\n                  {/*              onChange={onFieldChange}/>*/}\n                  {/*      <CInput size=\"sm\" type=\"text\" id=\"new-password\" name=\"new-password\" className=\"input-sm input-field\"*/}\n                  {/*              placeholder=\"New password\" onChange={onFieldChange}/>*/}\n                  {/*    </CCol>*/}\n                  {/*  </CFormGroup>*/}\n                  {/*</CForm>*/}\n                  {/*<CButton color=\"success\" size=\"sm\" onClick={() => {*/}\n                  {/*  addCredential();*/}\n                  {/*  setModal(!modal);*/}\n                  {/*}}>Add credential</CButton>*/}\n                </CCardHeader>\n              </CCardHeader>\n              <CCardBody>\n                {loaded ?\n                  (\n                    <CListGroup>\n                      {divisions.map((division) => {\n                        const hrefLink = `#/divisions/${division._id}`;\n                        return (\n                          <CListGroupItem href={hrefLink}>\n                            <p>ID: {division._id}</p>\n                            <p>Name: {division.name}</p>\n                          </CListGroupItem>\n                        )\n                      })}\n                    </CListGroup>\n                  ) :\n                  <p>Loading</p>\n                }\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </>\n    );\n  }\n}\n\nexport default Divisions;\n"],"sourceRoot":""}